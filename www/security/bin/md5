#!/usr/bin/env php
<?php

// http://en.wikipedia.org/wiki/MD5

error_reporting( E_ALL );

// taken from `man md5`
function help( $exit = 0 ) {
	global $argv;
	echo "\033[1mNAME\033[0m\n";
	echo "\t\033[1m{$argv[0]}\033[0m -- calculate a message-digest fingerprint (checksum) for a string\n\n";

	echo "\033[1mSYNOPSIS\033[0m\n";
	echo "\t\033[1mmd5\033[0m \033[4mstring\033[0m [\033[4minitial_state\033[0m] [\033[4minitial_length_adjustment\033[0m]\n\n";

	echo "\033[1mDESCRIPTION\033[0m\n";
	echo "\tThe \033[1mmd5\033[0m utility takes as input a message of arbitrary length and\n";
	echo "\tproduces as output a 'fingerprint' or 'message digest' of the input.\n";
	echo "\tIt is conjectured that it is computationally infeasible to produce two\n";
	echo "\tmessages having the same message digest, or to produce any message\n";
	echo "\thaving a given prespecified target message digest.\n\n";

	echo "\tMD5's designer Ron Rivest has stated 'md5 and sha1 are both clearly\n";
	echo "\tbroken (in terms of collision-resistance)'.  So MD5 should be avoided\n";
	echo "\twhen creating new protocols, or implementing protocols with better\n";
	echo "\toptions.  SHA256 and SHA512 are better options as they have been more\n";
	echo "\tresilient to attacks (as of 2009).\n\n";

	echo "\tThis version of \033[1mmd5\033[0m accepts the \033[4minitial_state\033[0m and\n";
	echo "\t\033[4minitial_length_adjustment\033[0m parameters, which are noramlly defined as part\n";
	echo "\tof the algorithm or calculated from the input.  Controlling these two\n";
	echo "\tparameters is useful in analyzing attacks on certain vulnerable uses of\n";
	echo "\t\033[1mmd5\033[0m.\n\n";

	echo "\t\033[4mstring\033[0m\n";
	echo "\t\tThe string for which to calculate the message digest.\n";
	echo "\t\tSpecify the \033[4mstring\033[0m as '-' to read from STDIN.\n\n";

	echo "\t\033[4minitial_state\033[0m\n";
	echo "\t\tThe 128-bit initial state of the algorithm (parameters A, B, C,\n";
	echo "\t\tD in RFC 1321).\n";
	echo "\t\tSpecified as a 32-hexit string.\n\n";

	echo "\t\033[4minitial_length_adjustment\033[0m\n";
	echo "\t\tThe length of the input \033[4mstring\033[0m is padded to the next largest\n";
	echo "\t\tmultiple of 512 bits (64 bytes).  The length of the original\n";
	echo "\t\tstring is stored as part of that padding.  Specifying this\n";
	echo "\t\tparameter does not increase the length of the input or padding.\n";
	echo "\t\tIt increments the value stored in the padding.\n\n";

	echo "\033[1mSEE ALSO\033[0m\n";
	echo "\tmd5(1), md5(3)\n\n";
	echo "\tRFC 1321 - http://tools.ietf.org/html/rfc1321\n\n";
	echo "\thttp://en.wikipedia.org/wiki/MD5\n\n";

	exit( $exit );
}

function error( $message = false ) {
	global $argv;
	fwrite( STDERR, "\033[1m{$argv[0]}\033[0m \033[4mstring\033[0m [\033[4minitial_state\033[0m] [\033[4minitial_length_adjustment\033[0m]\n\n" );
	if ( $message ) {
		fwrite( STDERR, "$message\n\n" );
	}
	fwrite( STDERR, "See `$argv[0] --help` for more information.\n" );
	exit( 1 );
}

if ( count( $argv ) < 2 ) {
	error();
}

foreach ( $argv as $arg ) {
	if ( '-h' === $arg || '--h' === $arg || '--help' === $arg ) {
		help();
	}
}

$data = $argv[1];
$init = null;
$add_to_length = 0;

if ( isset( $argv[2] ) ) {
	if ( ! preg_match( '/^[0-9a-f]{32}$/i', $argv[2] ) ) {
		error( "[\033[4minitial_state\033[0m] must be specified as a 32-hexit string." );
	}
	$init = $argv[2];
}

if ( isset( $argv[3] ) ) {
	if ( ! ctype_digit( $argv[3] ) ) {
		error( "[\033[4minitial_length_adjustment\033[0m] must be specified as a base-10 integer." );
	}
	$add_to_length = (int) $argv[3];
}

if ( '-' === $data ) {
	$data = file_get_contents( 'php://stdin' );
}

function left_rotate( $x, $c ) {
	return ( ( $x << $c ) | ( $x >> ( 32 - $c ) ) );
}

function bytes_to_int( $string ) {
	$out = 0;
	foreach ( str_split( $string, 1 ) as $shift => $chr ) {
		$ord = ord( $chr );
		$out = ( $out + ( $ord << ( 8 * $shift ) ) ) & 0xffffffff;
	}
	return $out;
}

$shifts = array(
	7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,
	5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,
	4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,
	6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21
);

$int_sins = array(
	0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,
	0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
	0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,
	0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
	0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,
	0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
	0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,
	0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
	0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,
	0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
	0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05,
	0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
	0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
	0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
	0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
	0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391
);

if ( is_null( $init ) ) {
	$a0 = 0x67452301;
	$b0 = 0xefcdab89;
	$c0 = 0x98badcfe;
	$d0 = 0x10325476;
} else {
	extract( unpack( "Va0/Vb0/Vc0/Vd0", hex2bin( $init ) ) );
}

$original_length_bytes = ( strlen( $data ) + $add_to_length );
$original_length = $original_length_bytes * 8;

echo "DATA    : $data\n";
echo "LENGTH  : [BYTES] $original_length_bytes\n";
echo "LENGTH  : [BITS]  $original_length\n";

$padding = chr( 0x80 );

while ( 56 !== ( strlen( $data . $padding ) % 64 ) ) {
	$padding .= chr( 0x00 );
}

$original_length_hex = sprintf( "%016x", $original_length );

foreach ( array_reverse( str_split( $original_length_hex, 2 ) ) as $byte ) {
	$padding .= chr( hexdec( $byte ) );
}

$data .= $padding;

$padding_url = rawurlencode( $padding );
$padding_hex = str_replace( '%', '\\x', $padding_url );

echo "PADDING : [HEX]   $padding_hex\n";
echo "PADDING : [URL]   $padding_url\n";

foreach ( str_split( $data, 64 ) as $data_chunk ) {
	$words = array_map( 'bytes_to_int', str_split( $data_chunk, 4 ) );

	$A = $a0;
	$B = $b0;
	$C = $c0;
	$D = $d0;

	for ( $i = 0; $i < 64; $i++ ) {
		if ( 0 <= $i && $i < 16 ) {
			$F = ( $B & $C ) | ( ( ~ $B ) & $D );
			$g = $i;
		} else if ( 16 <= $i && $i < 32 ) {
			$F = ( $D & $B ) | ( ( ~ $D ) & $C );
			$g = ( 5 * $i + 1 ) % 16;
		} else if ( 32 <= $i && $i < 48 ) {
			$F = $B ^ $C ^ $D;
			$g = ( 3 * $i + 5 ) % 16;
		} else {
			$F = $C ^ ( $B | ( ~ $D ) ) & 0xffffffff;
			$g = ( 7 * $i ) % 16;
		}

		$d_temp = $D;

		$D = $C & 0xffffffff;
		$C = $B & 0xffffffff;
		$B = $B + left_rotate( ( $A + $F + $int_sins[$i] + $words[$g] ) & 0xffffffff, $shifts[$i] ) & 0xffffffff;
		$A = $d_temp & 0xffffffff;
	}

	$a0 = ( $a0 + $A ) & 0xffffffff;
	$b0 = ( $b0 + $B ) & 0xffffffff;
	$c0 = ( $c0 + $C ) & 0xffffffff;
	$d0 = ( $d0 + $D ) & 0xffffffff;
}

$binary = pack( "V4", $a0, $b0, $c0, $d0 );
echo "DIGEST  : [HEX]   ";
echo bin2hex( $binary );
echo "\n";
